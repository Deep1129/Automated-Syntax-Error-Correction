# -*- coding: utf-8 -*-
"""Final_ASEML_assignment__ (1).ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1tP57r6hkjmih9uMu4848xvUUxS5QbZLf

# Loading train data
"""

from google.colab import drive
drive.mount('/content/drive')

import pandas as pd
import numpy as np
import ast

df = pd.read_csv('drive/MyDrive/train.csv')

"""# ADDING SOS_Token, EOS_Token and PAD_token"""

for i in range(14643):
  df['sourceLineTokens'][i] = ast.literal_eval(df['sourceLineTokens'][i])
  if len(df['sourceLineTokens'][i])>60:
    df['sourceLineTokens'][i] = df['sourceLineTokens'][i][0:60]
  df['sourceLineTokens'][i].append("EOS_token")
  df['sourceLineTokens'][i].insert(0,"SOS_token")
  n=len(df['sourceLineTokens'][i])
  while(n<62):
    df['sourceLineTokens'][i].append("PAD_token")
    n+=1

for i in range(14643):
  df['targetLineTokens'][i] = ast.literal_eval(df['targetLineTokens'][i])
  if len(df['targetLineTokens'][i])>60:
    df['targetLineTokens'][i] = df['targetLineTokens'][i][0:60]
  df['targetLineTokens'][i].append("EOS_token")
  df['targetLineTokens'][i].insert(0,"SOS_token")
  n=len(df['targetLineTokens'][i])
  while(n<62):
    df['targetLineTokens'][i].append("PAD_token")
    n+=1

"""# Vocabulary"""

class Vocabulary:


    def __init__(self, name):
        PAD_token = 0   # Used for padding short sentences
        SOS_token = 1   # Start-of-sentence token
        EOS_token = 2   # End-of-sentence token
        self.name = name
        self.word2index = {}
        self.word2count = {}
        self.index2word = {PAD_token: "PAD", SOS_token: "SOS", EOS_token: "EOS"}
        self.num_words = 3
        self.num_sentences = 0
        self.longest_sentence = 0

    def add_word(self, word):
        if word not in self.word2index:
            # First entry of word into vocabulary
            self.word2index[word] = self.num_words
            self.word2count[word] = 1
            self.index2word[self.num_words] = word
            self.num_words += 1
        else:
            # Word exists; increase word count
            self.word2count[word] += 1
            
    def add_sentence(self, sentence):
        sentence_len = 0
        for word in sentence:
            sentence_len += 1
            self.add_word(word)
        if sentence_len > self.longest_sentence:
            # This is the longest sentence
            self.longest_sentence = sentence_len
        # Count the number of sentences
        self.num_sentences += 1

    def to_word(self, index):
        return self.index2word[index]

    def to_index(self, word):
        return self.word2index[word]

obj = Vocabulary("Input_data")
obj_target = Vocabulary("Target_data")

for i in range(df.shape[0]):
  obj.add_sentence(df['sourceLineTokens'][i])
  obj_target.add_sentence(df['targetLineTokens'][i])

max_len = obj.longest_sentence
max_len_target = obj_target.longest_sentence

"""**Sorting Vocabulary**"""

sort_orders = sorted(obj.word2count.items(), key=lambda x: x[1],reverse=True)
sort_orders_target = sorted(obj_target.word2count.items(), key=lambda x: x[1],reverse=True)

"""**WORD2INDEX in sorted vocabulary**"""

k=250

dict_index ={}
for i in range(len(sort_orders)):
  dict_index[sort_orders[i][0]] =i


dict_index_target ={}
for i in range(len(sort_orders_target)):
  dict_index_target[sort_orders_target[i][0]] =i

# try:
#     geeky_file = open('drive/MyDrive/Vocabfile.txt', 'wt')
#     geeky_file.write(str(dict_index))
#     geeky_file.close()
  
# except:
#     print("Unable to write to file")

"""# Embedding

**Input Encoding**
"""

#top k words in vocabulary

vectors = np.zeros((len(sort_orders),k+1))              #array for every unique token

oov_vector = np.zeros((k+1))                           # for OOV tokens
oov_vector[k] =1

for i in range(k):
  vectors[i][i] =1
for i in range(k,len(sort_orders)):
  vectors[i] = oov_vector

encoder_input=[]
for i in range(14643):
  e=[]
  x = df['sourceLineTokens'][i]
  for j in x:
    index = dict_index[j]
    e.append(np.array(vectors[index]))

  encoder_input.append(np.array(e))

encoder_input = np.array(encoder_input)

"""**Decoder Input Encoding**"""

vectors_target = np.zeros((len(sort_orders_target),k+1))

for i in range(k):
  vectors_target[i][i] =1
for i in range(k,len(sort_orders_target)):
  vectors_target[i] = oov_vector

decoder_input=[]
for i in range(14643):
  e=[]
  x = df['targetLineTokens'][i]
  for j in x:
    index = dict_index_target[j]
    e.append(np.array(vectors_target[index]))
  # for i_rem in range(len(x),max_len_target):
  #   e.append(np.zeros(k+1))
  decoder_input.append(np.array(e))

decoder_input = np.array(decoder_input)

"""**Decoder Output encoding**"""

decoder_output=[]
for i in range(14643):
  e=[]
  x = df['targetLineTokens'][i]
  a=1
  for j in x:
    if a ==0:
      index = dict_index_target[j]
      e.append(np.array(vectors_target[index]))
    a=0

  e.append(np.array(vectors_target[0]))
  decoder_output.append(np.array(e))

decoder_output = np.array(decoder_output)



"""# Encoder Decoder Model Using LSTMs"""

import numpy as np
import tensorflow as tf
from tensorflow import keras

checkpoint_path = "drive/MyDrive/Model_cp"

cp_callback = tf.keras.callbacks.ModelCheckpoint(filepath=checkpoint_path,save_best_only=True, save_weights_only=False, verbose=1)

batch_size = 64  # Batch size for training.
epochs = 100 # Number of epochs to train for.
latent_dim = 256  # Latent dimensionality of the encoding space.
num_samples = 14643

num_decoder_tokens=251
num_encoder_tokens=251

encoder_inputs = keras.Input(shape=(None, num_encoder_tokens))
encoder = keras.layers.LSTM(latent_dim, return_state=True)
encoder_outputs, state_h, state_c = encoder(encoder_inputs)


encoder_states = [state_h, state_c]

decoder_inputs = keras.Input(shape=(None, num_decoder_tokens))

decoder_lstm = keras.layers.LSTM(latent_dim, return_sequences=True, return_state=True)
decoder_outputs, _, _ = decoder_lstm(decoder_inputs, initial_state=encoder_states)
decoder_dense = keras.layers.Dense(num_decoder_tokens, activation="softmax")
decoder_outputs = decoder_dense(decoder_outputs)

model = keras.Model([encoder_inputs, decoder_inputs], decoder_outputs)

model.compile(
    optimizer="adam", loss="categorical_crossentropy", metrics=["accuracy"]
)
model.fit(
    [encoder_input, decoder_input],
    decoder_output,
    batch_size=batch_size,
    epochs=epochs,
    validation_split=0.2,
    callbacks=[cp_callback]
)

model.save("drive/MyDrive/Model_Adam_cp")

"""**Decoder Model**"""

input_texts = df['sourceLineTokens']
max_encoder_seq_length= max_len
num_encoder_tokens=k+1
max_decoder_seq_length= max_len_target
num_decoder_tokens=k+1
target_texts = df['targetLineTokens']

input_token_index ={}
for i in range(len(sort_orders)):
  if i<250:
    input_token_index[sort_orders[i][0]] =i
  else:
    input_token_index['OOV_Token'] =250

target_token_index ={}
for i in range(len(sort_orders_target)):
  if i<250:
    target_token_index[sort_orders_target[i][0]] =i
  else:
    target_token_index['OOV_Token'] =250

model = keras.models.load_model("drive/MyDrive/Model_cp")

encoder_inputs = model.input[0]  # input_1
encoder_outputs, state_h_enc, state_c_enc = model.layers[2].output  # lstm_1
encoder_states = [state_h_enc, state_c_enc]
encoder_model = keras.Model(encoder_inputs, encoder_states)

decoder_inputs = model.input[1]  # input_2
decoder_state_input_h = keras.Input(shape=(latent_dim,), name="input_3")
decoder_state_input_c = keras.Input(shape=(latent_dim,), name="input_4_")
decoder_states_inputs = [decoder_state_input_h, decoder_state_input_c]
decoder_lstm = model.layers[3]
decoder_outputs, state_h_dec, state_c_dec = decoder_lstm(
    decoder_inputs, initial_state=decoder_states_inputs
)
decoder_states = [state_h_dec, state_c_dec]
decoder_dense = model.layers[4]
decoder_outputs = decoder_dense(decoder_outputs)
decoder_model = keras.Model(
    [decoder_inputs] + decoder_states_inputs, [decoder_outputs] + decoder_states
)

# Reverse-lookup token index to decode sequences back to
# something readable.
reverse_input_char_index = dict((i, char) for char, i in input_token_index.items())
reverse_target_char_index = dict((i, char) for char, i in target_token_index.items())


def decode_sequence(input_seq):
    # Encode the input as state vectors.
    states_value = encoder_model.predict(input_seq)

    # Generate empty target sequence of length 1.
    target_seq = np.zeros((1, 1, num_decoder_tokens))
    # Populate the first character of target sequence with the start character.
    # target_seq[0, 0, target_token_index["SOS"]] = 1.0

    # Sampling loop for a batch of sequences
    # (to simplify, here we assume a batch of size 1).
    stop_condition = False
    decoded_sentence = ""
    decoded_list=[]
    while not stop_condition:
        output_tokens, h, c = decoder_model.predict([target_seq] + states_value)

        # Sample a token
        sampled_token_index = np.argmax(output_tokens[0, -1, :])
        sampled_char = reverse_target_char_index[sampled_token_index]
        decoded_list.append(sampled_char)

        # Exit condition: either hit max length
        # or find stop character.
        if sampled_char == "EOS_token" or len(decoded_sentence) > max_len_target:
            stop_condition = True
        # if len(decoded_sentence) > max_len_target:
        #     stop_condition = True

        # Update the target sequence (of length 1).
        target_seq = np.zeros((1, 1, num_decoder_tokens))
        target_seq[0, 0, sampled_token_index] = 1.0

        # Update states
        states_value = [h, c]
    return decoded_list

"""**Test CSV**"""

df_test = pd.read_csv('drive/MyDrive/valid.csv')

for i in range(df_test.shape[0]):
  df_test['sourceLineTokens'][i] = ast.literal_eval(df_test['sourceLineTokens'][i])
  if len(df_test['sourceLineTokens'][i])>60:
    df_test['sourceLineTokens'][i] = df_test['sourceLineTokens'][i][0:60]
  df_test['sourceLineTokens'][i].append("EOS_token")
  df_test['sourceLineTokens'][i].insert(0,"SOS_token")
  n=len(df_test['sourceLineTokens'][i])
  while(n<62):
    df_test['sourceLineTokens'][i].append("PAD_token")
    n+=1

for i in range(df_test.shape[0]):
  df_test['targetLineTokens'][i] = ast.literal_eval(df_test['targetLineTokens'][i])
  if len(df_test['targetLineTokens'][i])>60:
    df_test['targetLineTokens'][i] = df_test['targetLineTokens'][i][0:60]
  df_test['targetLineTokens'][i].append("EOS_token")
  df_test['targetLineTokens'][i].insert(0,"SOS_token")
  n=len(df_test['targetLineTokens'][i])
  while(n<62):
    df_test['targetLineTokens'][i].append("PAD_token")
    n+=1

encoder_input_test=[]
for i in range(df_test.shape[0]):
  e=[]
  x = df_test['sourceLineTokens'][i]
  for j in x:
    if (j in dict_index):
      index = dict_index[j]
    else:
      index=250
    e.append(np.array(vectors[index]))
  # for i_rem in range(len(x),max_len):
  #   e.append(np.zeros(k+1))
 
  # print(type(emb_test))
  encoder_input_test.append(np.array(e))

encoder_input_test = np.array(encoder_input_test)

encoder_input_test.shape

input_texts_test = df_test['sourceLineTokens']

output_texts_test=df_test['targetLineTokens']

count=0
for i in range(df_test.shape[0]):
  input_seq = encoder_input_test[i:i+1]
  # print("Input sentence:", input_seq.shape)
  decoded_sentence = decode_sequence(input_seq)
  decoded_sentence.pop()
  # print("-")

  output_tokens=[]
  j=1
  while(output_texts_test[i][j] != 'EOS_token'):
      output_tokens.append(output_texts_test[i][j])
      j+=1
  if(output_tokens == decoded_sentence):
    count+=1

print('accuracy on validation data',count/df_test.shape[0])



i=1015
input_seq = encoder_input_test[i:i+1]
# print("Input sentence:", input_seq.shape)
decoded_sentence = decode_sequence(input_seq)
decoded_sentence.pop()
print('actual',output_texts_test[i])
print('pred',str(decoded_sentence))



# output_tokens=[]
# j=1
# while(output_texts_test[i][j] != 'EOS_token'):
#     output_tokens.append(output_texts_test[i][j])
#     j+=1
# print(output_tokens)

# # print("-")

"""# Encoder Decoder Model Using Bidirectional LSTMs"""

from keras.models import Sequential
from keras.layers import Dense
from keras.layers import LSTM
from keras.layers.embeddings import Embedding
from keras.preprocessing import sequence
# fix random seed for reproducibility

from keras.layers import LSTM,Bidirectional,Input,Concatenate
from keras.models import Model

n_units =latent_dim
n_input = num_encoder_tokens
n_output = num_decoder_tokens

# encoder
encoder_inputs = Input(shape=(None, n_input))
encoder = Bidirectional(LSTM(n_units, return_state=True))
encoder_outputs, forward_h, forward_c, backward_h, backward_c = encoder(encoder_inputs)
state_h = Concatenate()([forward_h, backward_h])
state_c = Concatenate()([forward_c, backward_c])
encoder_states = [state_h, state_c]

# decoder
decoder_inputs = Input(shape=(None, n_output))    
decoder_lstm = LSTM(n_units*2, return_sequences=True, return_state=True)
decoder_outputs, _, _ = decoder_lstm(decoder_inputs, initial_state=encoder_states)
decoder_dense = Dense(n_output, activation='softmax')
decoder_outputs = decoder_dense(decoder_outputs)
model_bi = Model([encoder_inputs, decoder_inputs], decoder_outputs)

model_bi.compile(
    optimizer="rmsprop", loss="categorical_crossentropy", metrics=["accuracy"]
)
model_bi.fit(
    [encoder_input, decoder_input],
    decoder_output,
    batch_size=batch_size,
    epochs=epochs,
    validation_split=0.2,
)

model.save("drive/MyDrive/Model_bi")

model = keras.models.load_model("drive/MyDrive/Model_bi")

encoder_inputs = model.input[0]  # input_1
encoder_outputs, state_h_enc, state_c_enc = model.layers[2].output  # lstm_1
encoder_states = [state_h_enc, state_c_enc]
encoder_model = keras.Model(encoder_inputs, encoder_states)

decoder_state_input_h = Input(shape=(n_units*2,))
decoder_state_input_c = Input(shape=(n_units*2,))
decoder_states_inputs = [decoder_state_input_h, decoder_state_input_c]
decoder_outputs, state_h, state_c = decoder_lstm(decoder_inputs, initial_state=decoder_states_inputs)
decoder_states = [state_h, state_c]
decoder_outputs = decoder_dense(decoder_outputs)
decoder_model = Model([decoder_inputs] + decoder_states_inputs, [decoder_outputs] + decoder_states)

reverse_input_char_index = dict((i, char) for char, i in input_token_index.items())
reverse_target_char_index = dict((i, char) for char, i in target_token_index.items())

encoder_model= keras.Model(encoder_inputs, encoder_states)

def decode_sequence(input_seq):
    # Encode the input as state vectors.
    states_value = encoder_model.predict(input_seq)

    # Generate empty target sequence of length 1.
    target_seq = np.zeros((1, 1, num_decoder_tokens))
    # Populate the first character of target sequence with the start character.
    # target_seq[0, 0, target_token_index["SOS"]] = 1.0

    # Sampling loop for a batch of sequences
    # (to simplify, here we assume a batch of size 1).
    stop_condition = False
    decoded_sentence = ""
    decoded_list=[]
    while not stop_condition:
        output_tokens, h, c = decoder_model.predict([target_seq] + states_value)

        # Sample a token
        sampled_token_index = np.argmax(output_tokens[0, -1, :])
        sampled_char = reverse_target_char_index[sampled_token_index]
        decoded_list.append(sampled_char)

        # Exit condition: either hit max length
        # or find stop character.
        if sampled_char == "EOS_token" or len(decoded_sentence) > max_len_target:
            stop_condition = True
        # if len(decoded_sentence) > max_len_target:
        #     stop_condition = True

        # Update the target sequence (of length 1).
        target_seq = np.zeros((1, 1, num_decoder_tokens))
        target_seq[0, 0, sampled_token_index] = 1.0

        # Update states
        states_value = [h, c]
    return decoded_list

count=0
for i in range(df_test.shape[0]):
  input_seq = encoder_input_test[i:i+1]
  # print("Input sentence:", input_seq.shape)
  decoded_sentence = decode_sequence(input_seq)
  decoded_sentence.pop()
  # print("-")

  output_tokens=[]
  j=1
  while(output_texts_test[i][j] != 'EOS_token'):
      output_tokens.append(output_texts_test[i][j])
      j+=1
  if(output_tokens == decoded_sentence):
    count+=1

print(count/df_test.shape[0])

i=1015
input_seq = encoder_input_test[i:i+1]
# print("Input sentence:", input_seq.shape)
decoded_sentence = decode_sequence(input_seq)
decoded_sentence.pop()
print('actual',output_texts_test[i])
print('pred',str(decoded_sentence))

